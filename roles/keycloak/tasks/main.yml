---

## this is to check if it's about upgrading (upgrade process is handled internally by keycloak/liquibase)
- name:
  block:
  - name: Stop running instance
    service:
      name: keycloak
      state: restarted
    become: yes
  - name: Generate timestamp
    set_fact:
      file_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
  - name: Move previous installation (folder will be named keycloak-previous-{runtime_timestamp} at keycloak_home)
    command: "mv {{keycloak_home}} {{keycloak_home}}/../keycloak-previous-{{ file_timestamp }}"
    args:
      removes: "{{keycloak_home}}"
      creates: "{{keycloak_home}}/../keycloak-previous-{{ file_timestamp }}"
    become: yes
  when: keycloak_is_upgrade

## now start the installation of keycloak

- name: Include OS-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "os/{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml"
    - "os/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "os/{{ ansible_distribution }}.yml"
    - "os/{{ ansible_os_family }}.yml"
  tags:
    - always

- name: Include keycloak-specific variables
  include_vars: "keycloak/{{ keycloak_version }}.yml"
  tags:
    - always

### Install Java with OS-specific packages
- include: "java/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
  tags:
    - always

### create keycloak_service_user
- name: Create Keycloak service user/group
  user:
    name: "{{keycloak_service_user}}"
    home: /nonexistent
    shell: /usr/sbin/nologin
    system: yes
    create_home: no
  become: yes
  tags:
    - always

#### Extract keycloak from archive
- block:
  - name: "Task block: Download keycloak"
    block:
    - name: Create keycloak temp directory
      file:
        path: "/tmp/keycloak-tmp"
        state: directory
    - name: Download keycloak archive file
      get_url:
        url: "{{keycloak_archive_url}}"
        dest: "/tmp/keycloak_archive"
        timeout: 30
    - name: Compute sha1 hash of archive
      stat:
        path: "/tmp/keycloak_archive"
        checksum_algorithm: sha1
      register: keycloak_sha1
    - name: Create keycloak_home if not exists
      file:
        path: "{{ keycloak_home }}"
        state: directory
    - name: create empty file if not exists
      ansible.builtin.copy:
        dest: "{{ keycloak_home }}/sha1"
        content: ""
        force: no
    - name: Previous sha1
      shell: "cat {{ keycloak_home }}/sha1"
      register: previous_sha1
    - name: "Compare sha1"
      set_fact:
        is_same_archive: "{{ true if keycloak_sha1.stat.checksum == previous_sha1.stdout else false }}"
    become: yes

  - name: "Task block: Extract keycloak"
    block:
    - name: unpack keycloak
      unarchive:
        src: "/tmp/keycloak_archive"
        dest: "/tmp/keycloak-tmp"
        remote_src: yes
        extra_opts: "--no-same-owner" #since it's run with elevated priviledges, to avoid preserving ownership from the archive
    - name: Find keycloak extracted folder name
      find:
        paths: /tmp/keycloak-tmp
        patterns: 'keycloak*'
        file_type: directory
        recurse: no
      register: find_result
    - name: Remove any previous installation
      ansible.builtin.file:
        path: "{{keycloak_home}}"
        state: absent
    - name: Move extracted keycloak to final keycloak folder
      command: "mv {{find_result.files[0].path}} {{keycloak_home}}"
      args:
        removes: "{{find_result.files[0].path}}"
        creates: "{{keycloak_home}}"

    - name: Store previous sha1
      copy:
        dest: "{{keycloak_home}}/sha1"
        content: "{{ keycloak_sha1.stat.checksum }}"
    become: yes
    when: not is_same_archive

  always:
  - name: Delete downloaded archive
    ansible.builtin.file:
      path: "/tmp/keycloak_archive"
      state: absent
  become: yes
  tags: "download_extract"


######## Create postgresql plugin
- name: "Task block: Create postgresql plugin"
  block:
  - name: create postresql plugin dir with parent directories
    file:
      path: "{{keycloak_home}}/modules/system/layers/keycloak/org/postgresql/main"
      state: directory
  - name: Download postgresql JDBC driver
    get_url:
      url: "https://jdbc.postgresql.org/download/{{keycloak_postgresql_jar_name}}"
      dest: "{{keycloak_home}}/modules/system/layers/keycloak/org/postgresql/main"
  - name: Installing postgresql plugin
    template:
      src: templates/module.xml.j2
      dest: "{{keycloak_home}}/modules/system/layers/keycloak/org/postgresql/main/module.xml"
  become: yes
  tags: "postgresql_plugin"

######## Install template standalone-ha.xml

- name: Installing keycloak configuration (standalone-ha.xml)
  template:
    mode: 0644
    src: templates/{{keycloak_version}}/standalone-ha.xml.j2
    dest: "{{keycloak_home}}/standalone/configuration/standalone-ha.xml"
  become: yes
  tags: "install_standaloneha"

##### Set keycloak working dir and logs writable for service user
- name: "Setting standalone folder writable for user: {{keycloak_service_user}} - where the logs and it's internal temporary files are created"
  file:
    dest: "{{keycloak_home}}/standalone"
    owner: "{{keycloak_service_user}}"
    group: "{{keycloak_service_user}}"
    recurse: yes
  become: yes
  tags: "setup_file_permissions"

############### Setup admin user
- name: "Task block: Setup admin user"
  block:
  - name: Remove file (delete file if exists)
    ansible.builtin.file:
      path: "{{keycloak_home}}/standalone/configuration/keycloak-add-user.json"
      state: absent
  - name: Create admin user
    shell: "{{keycloak_home}}/bin/add-user-keycloak.sh -u {{ keycloak_admin.user }} -p {{ keycloak_admin.pass }}"
    args:
      executable: /bin/bash
  become: yes
  tags: "setup_admin"


### install other plugins

# would loop over block of tasks within install_plugins.yml, but looping on blocks is not allowed in ansible
- name: Install other plugins
  include_tasks: "install_plugin.yml"
  when: not keycloak_plugins is undefined
  loop: "{{ lookup('dict', keycloak_plugins, wantlist=True) }}"
  tags: "install_plugins"


############### Setup keycloak as a service

- name: "Task block: Setup keycloak as a service"
  block:
  - name: keycloak systemd setup
    template:
      owner: root
      group: root
      mode: 0644
      src: templates/keycloak.service.j2
      dest: /etc/systemd/system/keycloak.service
    become: yes
  tags: "setup_sys_service"
  # TODO trigger systemctl daemon-reload when changed

- name: Ensure Keycloak service is active and enabled on boot
  service:
    name: "keycloak"
    state: "started"
    enabled: yes
  become: yes

##### configure keycloak

- name: Configure various keycloak aspects
  import_tasks: "configure.yml"
  tags: "configure"
