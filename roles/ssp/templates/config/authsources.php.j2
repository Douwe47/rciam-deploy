<?php
/*
 * The SimpleSAMLphp authentication sources
 * {{ ansible_managed }}
 */

$config = array(

    // This is a authentication source which handles admin authentication.
    'admin' => array(
        // The default is to use core:AdminPassword, but it can be replaced with
        // any authentication source.

        'core:AdminPassword',
    ),

{% for authsource in ssp_authsources_saml %}
    '{{ authsource.name }}' => array(
        'saml:SP',
{% if authsource.entity_id is defined %}
        // The entity ID of this SP.
        // Can be NULL/unset, in which case an entity ID is generated based on the metadata URL.
        'entityID' => '{{ authsource.entity_id }}',
{% endif %}
{% if authsource.idp is defined %}
        // The entity ID of the IdP this should SP should contact.
        // Can be NULL/unset, in which case the user will be shown a list of available IdPs.
        'idp' => '{{ authsource.idp }}',
{% endif %}
{% if authsource.disco_url is defined %}
        // The URL to the discovery service.
        // Can be NULL/unset, in which case a builtin discovery service will be used.
        'discoURL' => '{{ authsource.disco_url }}',
{% endif %}
{% if authsource.generate_ssl_certificate %}
        // X.509 key and certificate. Relative to the cert directory.
        'privatekey' => 'sp-{{ authsource.name }}.key',
        'certificate' => 'sp-{{ authsource.name }}.crt',
{% if authsource.sign_algorithm is defined %}
        // Algorithm to use when signing any message generated by this SP.
        'signature.algorithm' => '{{ authsource.sign_algorithm }}',
{% endif %}
{% if authsource.redirect_sign is defined %}
        // Whether authentication requests, logout requests and logout responses
        // sent from this SP should be signed. 
        'redirect.sign' => {{ authsource.redirect_sign }},
{% endif %}
{% if authsource.redirect_validate is defined %}
        // Whether logout requests and logout responses received received by
        // this SP should be validated. 
        'redirect.validate' => {{ authsource.redirect_validate }},
{% endif %}
{% if authsource.sign_authnrequest %}
        // Whether to sign authentication requests sent from this SP.
        'sign.authnrequest' => {{ authsource.sign_authnrequest }},
{% endif %}
{% if authsource.sign_logout %}
        // Whether to sign logout messages sent from this SP.
        'sign.logout' => {{ authsource.sign_logout }},
{% endif %}
{% endif %}
{% if authsource.display_name is defined %}
        'name' => array(
    {% for key, value in authsource.display_name.iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
    ),
{% endif %}
{% if authsource.description is defined %}
        'description' => array(
    {% for key, value in authsource.description.iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
    ),
{% endif %}
{% if authsource.privacy_statement_url is defined %}
        'privacypolicy' => array(
    {% for key, value in authsource.privacy_statement_url.iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
    ),
{% endif %}
{% if authsource.entity_attributes is defined %}
        'EntityAttributes' => array(
{% for entity_attribute in authsource.entity_attributes %}
            '{{ entity_attribute.attribute_name }}' => array(
{% for entity_attribute_value in entity_attribute.attribute_values %}
                '{{ entity_attribute_value }}',
{% endfor %}
            ),
{% endfor %}
        ),
{% endif %}
{% if authsource.contacts is defined %}
        // List of contacts in addition to the technical contact configured
        // through config/config.php
        'contacts' => array(
{% for contact in authsource.contacts %}
            array(
                'contactType'       => '{{ contact.contact_type }}',
{% if contact.company is defined %}
                'company'           => '{{ contact.company }}',
{% endif %}
{% if contact.given_name is defined %}
                'givenName'         => '{{ contact.given_name }}',
{% endif %}
{% if contact.sur_name is defined %}
                'surName'           => '{{ contact.sur_name }}',
{% endif %}
{% if contact.email_address is defined %}
                'emailAddress'      => '{{ contact.email_address }}',
{% endif %}
{% if contact.telephone_number is defined %}
                'telephoneNumber'   => '{{ contact.telephone_number }}',
{% endif %}
            ),
{% endfor %}
        ),
{% endif %}
        'UIInfo' => array(
{% if authsource.display_name is defined %}
            'DisplayName' => array(
    {% for key, value in authsource.display_name.iteritems() %}
            '{{ key }}' => '{{ value }}',
    {% endfor %}
        ),
{% endif %}
{% if authsource.description is defined %}
            'Description' => array(
    {% for key, value in authsource.description.iteritems() %}
            '{{ key }}' => '{{ value }}',
    {% endfor %}
        ),
{% endif %}
{% if authsource.logos is defined %}
            'Logo' => array(
{% for logo in authsource.logos %}
                array(
                    'url' => '{{ logo.url }}',
                    'height' => {{ logo.height }},
                    'width' => {{ logo.width }},
{% if logo.lang is defined %}
                    'lang' => '{{ logo.lang }}',
{% endif %}
                ),
{% endfor %}
            ),
{% endif %}
{% if authsource.information_url is defined %}
            'InformationURL' => array(
    {% for key, value in authsource.information_url.iteritems() %}
            '{{ key }}' => '{{ value }}',
    {% endfor %}
        ),
{% endif %}
{% if authsource.privacy_statement_url is defined %}
            'PrivacyStatementURL' => array(
    {% for key, value in authsource.privacy_statement_url.iteritems() %}
            '{{ key }}' => '{{ value }}',
    {% endfor %}
        ),
{% endif %}
        ),
{% if authsource.attributes is defined %}
        /*
         * The attributes parameter contains an array of all attributes 
         * requested by the SP (both optional and mandatory).
         * The attributes can be expressed as an array of names or as an 
         * associative array in the form of 'friendlyName' => 'name'.
         */
        'attributes' => array (
{% if authsource.attributes['required'] is defined %}
    {% for key, value in authsource.attributes['required'].iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
{% endif %}
{% if authsource.attributes['optional'] is defined %}
    {% for key, value in authsource.attributes['optional'].iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
{% endif %}
    ),
{% if authsource.attributes['required'] is defined %}
        /*
         * The attributes.required parameter contains the attributes
         * required by the SP (mandatory).
         * The attributes can be expressed as an array of names or as an 
         * associative array in the form of 'friendlyName' => 'name'.
         */
        'attributes.required' => array (
    {% for key, value in authsource.attributes['required'].iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
    ),
{% endif %}
{% if authsource.attributes['name_format'] is defined %}
        'attributes.NameFormat' => '{{ authsource.attributes['name_format'] }}',
{% endif %}
{% endif %}
{% if authsource.name_id_policy is defined %}
        // The format of the NameID we request from the IdP.
        'NameIDPolicy' => '{{ authsource.name_id_policy }}',
{% endif %}
    ),
{% endfor %}

{% if ssp_authsources_facebook is defined %}
{% for authsource in ssp_authsources_facebook %}
    '{{ authsource.name }}' => array(
        'authfacebook:Facebook',
        'api_key' => '{{ authsource.api_key }}',
        'secret' => '{{ authsource.secret }}',
{% if authsource.req_perms is defined %}
        // List of additional permissions to request from user
        'req_perms' => '{{ authsource.req_perms }}',
{% endif %}
{% if authsource.user_fields is defined %}
        // List of additional user profile fields to request
        'user_fields' => '{{ authsource.user_fields }}',
{% endif %}
    ),

{% endfor %}
{% endif %}
    /*
    // LinkedIn OAuth Authentication API.
    // Register your application to get an API key here:
    //  https://www.linkedin.com/secure/developer
    'linkedin' => array(
        'authlinkedin:LinkedIn',
        'key' => 'xxxxxxxxxxxxxxxx',
        'secret' => 'xxxxxxxxxxxxxxxx',
    ),
    */

);
