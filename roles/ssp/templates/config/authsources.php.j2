<?php
/*
 * The SimpleSAMLphp authentication sources
 * {{ ansible_managed }}
 */

$config = array(

    // This is a authentication source which handles admin authentication.
    'admin' => array(
        // The default is to use core:AdminPassword, but it can be replaced with
        // any authentication source.

        'core:AdminPassword',
    ),

{% for authsource in ssp_authsources_saml %}
    '{{ authsource.name }}' => array(
        'saml:SP',
{% if authsource.entity_id is defined %}
        // The entity ID of this SP.
        // Can be NULL/unset, in which case an entity ID is generated based on the metadata URL.
        'entityID' => '{{ authsource.entity_id }}',
{% endif %}
{% if authsource.idp is defined %}
        // The entity ID of the IdP this should SP should contact.
        // Can be NULL/unset, in which case the user will be shown a list of available IdPs.
        'idp' => '{{ authsource.idp }}',
{% endif %}
{% if authsource.disco_url is defined %}
        // The URL to the discovery service.
        // Can be NULL/unset, in which case a builtin discovery service will be used.
        'discoURL' => '{{ authsource.disco_url }}',
{% endif %}
{% if authsource.generate_ssl_certificate %}
        // X.509 key and certificate. Relative to the cert directory.
        'privatekey' => 'sp-{{ authsource.name }}.key',
        'certificate' => 'sp-{{ authsource.name }}.crt',
{% if authsource.sign_algorithm is defined %}
        // Algorithm to use when signing any message generated by this SP.
        'signature.algorithm' => '{{ authsource.sign_algorithm }}',
{% endif %}
{% if authsource.redirect_sign is defined %}
        // Whether authentication requests, logout requests and logout responses
        // sent from this SP should be signed. 
        'redirect.sign' => {{ authsource.redirect_sign }},
{% endif %}
{% if authsource.redirect_validate is defined %}
        // Whether logout requests and logout responses received received by
        // this SP should be validated. 
        'redirect.validate' => {{ authsource.redirect_validate }},
{% endif %}
{% if authsource.sign_authnrequest %}
        // Whether to sign authentication requests sent from this SP.
        'sign.authnrequest' => {{ authsource.sign_authnrequest }},
{% endif %}
{% if authsource.sign_logout %}
        // Whether to sign logout messages sent from this SP.
        'sign.logout' => {{ authsource.sign_logout }},
{% endif %}
{% endif %}
{% if authsource.display_name is defined %}
        'name' => array(
    {% for key, value in authsource.display_name.iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
    ),
{% endif %}
{% if authsource.description is defined %}
        'description' => array(
    {% for key, value in authsource.description.iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
    ),
{% endif %}
{% if authsource.privacy_statement_url is defined %}
        'privacypolicy' => array(
    {% for key, value in authsource.privacy_statement_url.iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
    ),
{% endif %}
{% if authsource.entity_attributes is defined %}
        'EntityAttributes' => array(
{% for entity_attribute in authsource.entity_attributes %}
            '{{ entity_attribute.attribute_name }}' => array(
{% for entity_attribute_value in entity_attribute.attribute_values %}
                '{{ entity_attribute_value }}',
{% endfor %}
            ),
{% endfor %}
        ),
{% endif %}
{% if authsource.contacts is defined %}
        // List of contacts in addition to the technical contact configured
        // through config/config.php
        'contacts' => array(
{% for contact in authsource.contacts %}
            array(
                'contactType'       => '{{ contact.contact_type }}',
{% if contact.company is defined %}
                'company'           => '{{ contact.company }}',
{% endif %}
{% if contact.given_name is defined %}
                'givenName'         => '{{ contact.given_name }}',
{% endif %}
{% if contact.sur_name is defined %}
                'surName'           => '{{ contact.sur_name }}',
{% endif %}
{% if contact.email_address is defined %}
                'emailAddress'      => '{{ contact.email_address }}',
{% endif %}
{% if contact.telephone_number is defined %}
                'telephoneNumber'   => '{{ contact.telephone_number }}',
{% endif %}
            ),
{% endfor %}
        ),
{% endif %}
        'UIInfo' => array(
{% if authsource.display_name is defined %}
            'DisplayName' => array(
    {% for key, value in authsource.display_name.iteritems() %}
            '{{ key }}' => '{{ value }}',
    {% endfor %}
        ),
{% endif %}
{% if authsource.description is defined %}
            'Description' => array(
    {% for key, value in authsource.description.iteritems() %}
            '{{ key }}' => '{{ value }}',
    {% endfor %}
        ),
{% endif %}
{% if authsource.logos is defined %}
            'Logo' => array(
{% for logo in authsource.logos %}
                array(
                    'url' => '{{ logo.url }}',
                    'height' => {{ logo.height }},
                    'width' => {{ logo.width }},
{% if logo.lang is defined %}
                    'lang' => '{{ logo.lang }}',
{% endif %}
                ),
{% endfor %}
            ),
{% endif %}
{% if authsource.information_url is defined %}
            'InformationURL' => array(
    {% for key, value in authsource.information_url.iteritems() %}
            '{{ key }}' => '{{ value }}',
    {% endfor %}
        ),
{% endif %}
{% if authsource.privacy_statement_url is defined %}
            'PrivacyStatementURL' => array(
    {% for key, value in authsource.privacy_statement_url.iteritems() %}
            '{{ key }}' => '{{ value }}',
    {% endfor %}
        ),
{% endif %}
        ),
{% if authsource.attributes is defined %}
        /*
         * The attributes parameter contains an array of all attributes 
         * requested by the SP (both optional and mandatory).
         * The attributes can be expressed as an array of names or as an 
         * associative array in the form of 'friendlyName' => 'name'.
         */
        'attributes' => array (
{% if authsource.attributes['required'] is defined %}
    {% for key, value in authsource.attributes['required'].iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
{% endif %}
{% if authsource.attributes['optional'] is defined %}
    {% for key, value in authsource.attributes['optional'].iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
{% endif %}
    ),
{% if authsource.attributes['required'] is defined %}
        /*
         * The attributes.required parameter contains the attributes
         * required by the SP (mandatory).
         * The attributes can be expressed as an array of names or as an 
         * associative array in the form of 'friendlyName' => 'name'.
         */
        'attributes.required' => array (
    {% for key, value in authsource.attributes['required'].iteritems() %}
        '{{ key }}' => '{{ value }}',
    {% endfor %}
    ),
{% endif %}
{% if authsource.attributes['name_format'] is defined %}
        'attributes.NameFormat' => '{{ authsource.attributes['name_format'] }}',
{% endif %}
{% endif %}
{% if authsource.name_id_policy is defined %}
        // The format of the NameID we request from the IdP.
        'NameIDPolicy' => '{{ authsource.name_id_policy }}',
{% endif %}
    ),
{% endfor %}

    /*
    'example-sql' => array(
        'sqlauth:SQL',
        'dsn' => 'pgsql:host=sql.example.org;port=5432;dbname=simplesaml',
        'username' => 'simplesaml',
        'password' => 'secretpassword',
        'query' => 'SELECT uid, givenName, email, eduPersonPrincipalName FROM users WHERE uid = :username AND password = SHA2(CONCAT((SELECT salt FROM users WHERE uid = :username), :password),256);',
    ),
    */

    /*
    'example-static' => array(
        'exampleauth:Static',
        'uid' => array('testuser'),
        'eduPersonAffiliation' => array('member', 'employee'),
        'cn' => array('Test User'),
    ),
    */

    /*
    'example-userpass' => array(
        'exampleauth:UserPass',

        // Give the user an option to save their username for future login attempts
        // And when enabled, what should the default be, to save the username or not
        //'remember.username.enabled' => FALSE,
        //'remember.username.checked' => FALSE,

        'student:studentpass' => array(
            'uid' => array('test'),
            'eduPersonAffiliation' => array('member', 'student'),
        ),
        'employee:employeepass' => array(
            'uid' => array('employee'),
            'eduPersonAffiliation' => array('member', 'employee'),
        ),
    ),
    */

    /*
    'crypto-hash' => array(
        'authcrypt:Hash',
        // hashed version of 'verysecret', made with bin/pwgen.php
        'professor:{SSHA256}P6FDTEEIY2EnER9a6P2GwHhI5JDrwBgjQ913oVQjBngmCtrNBUMowA==' => array(
            'uid' => array('prof_a'),
            'eduPersonAffiliation' => array('member', 'employee', 'board'),
        ),
    ),
    */

    /*
    'htpasswd' => array(
        'authcrypt:Htpasswd',
        'htpasswd_file' => '/var/www/foo.edu/legacy_app/.htpasswd',
        'static_attributes' => array(
            'eduPersonAffiliation' => array('member', 'employee'),
            'Organization' => array('University of Foo'),
        ),
    ),
    */

    /*
    // This authentication source serves as an example of integration with an
    // external authentication engine. Take a look at the comment in the beginning
    // of modules/exampleauth/lib/Auth/Source/External.php for a description of
    // how to adjust it to your own site.
    'example-external' => array(
        'exampleauth:External',
    ),
    */

    /*
    'yubikey' => array(
        'authYubiKey:YubiKey',
         'id' => '000',
        // 'key' => '012345678',
    ),
    */

    /*
    'openid' => array(
        'openid:OpenIDConsumer',
        'attributes.required' => array('nickname'),
        'attributes.optional' => array('fullname', 'email',),
        // 'sreg.validate' => FALSE,
        'attributes.ax_required' => array('http://axschema.org/namePerson/friendly'),
        'attributes.ax_optional' => array('http://axschema.org/namePerson','http://axschema.org/contact/email'),
        // Prefer HTTP redirect over POST
        // 'prefer_http_redirect' => FALSE,
    ),
    */

    /*
    // Example of an authsource that authenticates against Google.
    // See: http://code.google.com/apis/accounts/docs/OpenID.html
    'google' => array(
        'openid:OpenIDConsumer',
        // Googles OpenID endpoint.
        'target' => 'https://www.google.com/accounts/o8/id',
        // Custom realm
        // 'realm' => 'http://*.example.org',
        // Attributes that google can supply.
        'attributes.ax_required' => array(
            //'http://axschema.org/namePerson/first',
            //'http://axschema.org/namePerson/last',
            //'http://axschema.org/contact/email',
            //'http://axschema.org/contact/country/home',
            //'http://axschema.org/pref/language',
        ),
        // custom extension arguments
        'extension.args' => array(
            //'http://specs.openid.net/extensions/ui/1.0' => array(
            //	'mode' => 'popup',
            //	'icon' => 'true',
            //),
        ),
    ),
    */

    /*
    'papi' => array(
        'authpapi:PAPI',
    ),
    */

{% if ssp_authsources_facebook is defined %}
{% for authsource in ssp_authsources_facebook %}
    '{{ authsource.name }}' => array(
        'authfacebook:Facebook',
        'api_key' => '{{ authsource.api_key }}',
        'secret' => '{{ authsource.secret }}',
{% if authsource.req_perms is defined %}
        // List of additional permissions to request from user
        'req_perms' => '{{ authsource.req_perms }}',
{% endif %}
    ),

{% endfor %}
{% endif %}
    /*
    // LinkedIn OAuth Authentication API.
    // Register your application to get an API key here:
    //  https://www.linkedin.com/secure/developer
    'linkedin' => array(
        'authlinkedin:LinkedIn',
        'key' => 'xxxxxxxxxxxxxxxx',
        'secret' => 'xxxxxxxxxxxxxxxx',
    ),
    */

    /*
    // Twitter OAuth Authentication API.
    // Register your application to get an API key here:
    //  http://twitter.com/oauth_clients
    'twitter' => array(
        'authtwitter:Twitter',
        'key' => 'xxxxxxxxxxxxxxxx',
        'secret' => 'xxxxxxxxxxxxxxxx',

        // Forces the user to enter their credentials to ensure the correct users account is authorized.
        // Details: https://dev.twitter.com/docs/api/1/get/oauth/authenticate
        'force_login' => FALSE,
    ),
    */

    /*
    // MySpace OAuth Authentication API.
    // Register your application to get an API key here:
    //  http://developer.myspace.com/
    'myspace' => array(
        'authmyspace:MySpace',
        'key' => 'xxxxxxxxxxxxxxxx',
        'secret' => 'xxxxxxxxxxxxxxxx',
    ),
    */

    /*
    // Windows Live ID Authentication API.
    // Register your application to get an API key here:
    //  https://manage.dev.live.com
    'windowslive' => array(
        'authwindowslive:LiveID',
        'key' => 'xxxxxxxxxxxxxxxx',
        'secret' => 'xxxxxxxxxxxxxxxx',
    ),
    */

    /*
    // Example of a LDAP authentication source.
    'example-ldap' => array(
        'ldap:LDAP',

        // Give the user an option to save their username for future login attempts
        // And when enabled, what should the default be, to save the username or not
        //'remember.username.enabled' => FALSE,
        //'remember.username.checked' => FALSE,

        // The hostname of the LDAP server.
        'hostname' => 'ldap.example.org',

        // Whether SSL/TLS should be used when contacting the LDAP server.
        'enable_tls' => TRUE,

        // Whether debug output from the LDAP library should be enabled.
        // Default is FALSE.
        'debug' => FALSE,

        // The timeout for accessing the LDAP server, in seconds.
        // The default is 0, which means no timeout.
        'timeout' => 0,

        // The port used when accessing the LDAP server.
        // The default is 389.
        'port' => 389,

        // Set whether to follow referrals. AD Controllers may require FALSE to function.
        'referrals' => TRUE,

        // Which attributes should be retrieved from the LDAP server.
        // This can be an array of attribute names, or NULL, in which case
        // all attributes are fetched.
        'attributes' => NULL,

        // The pattern which should be used to create the users DN given the username.
        // %username% in this pattern will be replaced with the users username.
        //
        // This option is not used if the search.enable option is set to TRUE.
        'dnpattern' => 'uid=%username%,ou=people,dc=example,dc=org',

        // As an alternative to specifying a pattern for the users DN, it is possible to
        // search for the username in a set of attributes. This is enabled by this option.
        'search.enable' => FALSE,

        // The DN which will be used as a base for the search.
        // This can be a single string, in which case only that DN is searched, or an
        // array of strings, in which case they will be searched in the order given.
        'search.base' => 'ou=people,dc=example,dc=org',

        // The attribute(s) the username should match against.
        //
        // This is an array with one or more attribute names. Any of the attributes in
        // the array may match the value the username.
        'search.attributes' => array('uid', 'mail'),

        // The username & password the SimpleSAMLphp should bind to before searching. If
        // this is left as NULL, no bind will be performed before searching.
        'search.username' => NULL,
        'search.password' => NULL,

        // If the directory uses privilege separation,
        // the authenticated user may not be able to retrieve
        // all required attribures, a privileged entity is required
        // to get them. This is enabled with this option.
        'priv.read' => FALSE,

        // The DN & password the SimpleSAMLphp should bind to before
        // retrieving attributes. These options are required if
        // 'priv.read' is set to TRUE.
        'priv.username' => NULL,
        'priv.password' => NULL,

    ),
    */

    /*
    // Example of an LDAPMulti authentication source.
    'example-ldapmulti' => array(
        'ldap:LDAPMulti',

        // Give the user an option to save their username for future login attempts
        // And when enabled, what should the default be, to save the username or not
        //'remember.username.enabled' => FALSE,
        //'remember.username.checked' => FALSE,

        // The way the organization as part of the username should be handled.
        // Three possible values:
        // - 'none':   No handling of the organization. Allows '@' to be part
        //             of the username.
        // - 'allow':  Will allow users to type 'username@organization'.
        // - 'force':  Force users to type 'username@organization'. The dropdown
        //             list will be hidden.
        //
        // The default is 'none'.
        'username_organization_method' => 'none',

        // Whether the organization should be included as part of the username
        // when authenticating. If this is set to TRUE, the username will be on
        // the form <username>@<organization identifier>. If this is FALSE, the
        // username will be used as the user enters it.
        //
        // The default is FALSE.
        'include_organization_in_username' => FALSE,

        // A list of available LDAP servers.
        //
        // The index is an identifier for the organization/group. When
        // 'username_organization_method' is set to something other than 'none',
        // the organization-part of the username is matched against the index.
        //
        // The value of each element is an array in the same format as an LDAP
        // authentication source.
        'employees' => array(
            // A short name/description for this group. Will be shown in a dropdown list
            // when the user logs on.
            //
            // This option can be a string or an array with language => text mappings.
            'description' => 'Employees',

            // The rest of the options are the same as those available for
            // the LDAP authentication source.
            'hostname' => 'ldap.employees.example.org',
            'dnpattern' => 'uid=%username%,ou=employees,dc=example,dc=org',
        ),

        'students' => array(
            'description' => 'Students',

            'hostname' => 'ldap.students.example.org',
            'dnpattern' => 'uid=%username%,ou=students,dc=example,dc=org',
        ),

    ),
    */

);
